//! The `solidity::ast` module implements the traits needed to work with the JSON abstract syntax
//! tree generated by the Solidity compiler.

use crate::json::JSONMutate;
use serde_json::Value;

/// Use the [`Value`] type directly to represent nodes
/// of the Solidity AST in JSON.
pub type SolidityAST = Value;

/// Trait that describes functionality that interacts specifically with the Solidity JSON AST.
pub trait SolidityASTApi {
    /// Return ownership for the sub-node for the key "expression".
    fn take_expression(&mut self) -> Option<SolidityAST>;

    /// Return ownership for the sub-node of the array stored in the object under the key
    /// "arguments".
    ///
    /// # Arguments
    ///
    /// * `index` - The array index of the argument to take.
    fn take_argument(&mut self, index: usize) -> Option<SolidityAST>;
}

impl SolidityASTApi for SolidityAST {
    fn take_expression(&mut self) -> Option<SolidityAST> {
        self.take_value_for_key("expression")
    }

    fn take_argument(&mut self, index: usize) -> Option<SolidityAST> {
        if let Some(v) = self.pointer_mut("/arguments") {
            if let Some(n) = v.get_mut(index) {
                return Some(n.take());
            }
        }
        None
    }
}
